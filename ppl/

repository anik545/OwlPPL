open Ppl;;
let breaks _ = memo (fun _ -> sample (beta 1. 1.))

let rec sample_index resid i = 
  let* keep = bernoulli (resid i) in
  if keep then return i else
    sample_index resid (i+1)


;;
(* val breaks : 'a -> 'b -> float = <fun>
val sample_index : (int -> float) -> int -> int dist = <fun> *)
let d = sample_index (breaks()) 0;;
(* val d : int dist = Bind (Primitive <abstr>, <fun>) *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 3 *)
sample d;;
(* - : int = 3 *)
sample d;;
(* - : int = 4 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 3 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 4 *)
sample d;;
(* - : int = 3 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 4 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 2 *)
sample d;;
(* - : int = 2 *)
sample d;;
(* - : int = 2 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 2 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 1 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 4 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 3 *)
sample d;;
(* - : int = 5 *)
sample d;;
(* - : int = 0 *)
sample d;;
(* - : int = 1 *)
sample d;;
(* - : int = 0 *)
open Ppl;;
(* let mh_transform ~burn d =
  let open Core.Sequence.Step in
  let proposal = prior_with_score d in
  let iterate (x, s) =
    let y, r = sample proposal in
    let ratio = if Float.(s = 0.) then 1. else r /. s in
    let accept = sample @@ bernoulli @@ Float.min 1. ratio in
    let next = if accept then (y, r) else (x, s) in
    Yield (return next, next)
  in
  let seq = Sequence.unfold_step ~init:(sample proposal) ~f:iterate in
  let seq = Sequence.drop_eagerly seq burn in
  (* burn initial states *)
  let r = ref seq in
  (* could also return a sample function here instead *)
  match Sequence.next !r with
  | Some (hd, tl) ->
      let* x, _ = hd in
      (* this assignment has to happen inside the bind
       so that successive samples (and calls on the f inside the bind)
       change the mutable state, here the sequence.
    *)
      r := tl;
      return x
  | None -> raise Undefined

;; *)
(* Line 11, characters 12-32:
Error: Unbound module Sequence *)
Inference.mh_sampler;;
(* - : int -> 'a dist -> 'a list dist = <fun> *)
Inference.mh_sampler 100;;
(* - : '_weak1 dist -> '_weak1 list dist = <fun> *)
Inference.mh_transform ~burn:1000 ;;
(* - : '_weak2 dist -> '_weak2 dist = <fun> *)
open Ppl
open Core

(* https://www.cl.cam.ac.uk/teaching/1819/DataSci/notes0.pdf pg33 *)
let single_coin =
  let pr = continuous_uniform 0. 1. in
  let toss t = condition' (fun p -> Primitive.(pdf @@ binomial 10 p) t) in
  let obs = 9 in
  (* we see x=9 heads *)
  let posterior = toss obs pr in
  (* let posterior' = condition (fun p -> pdf (Binomial(10,p)) obs) (continuous_uniform 0. 1.) in *)
  posterior

(* let coin heads = 
   let* coinweight = continuous_uniform 0. 1. in
   observe heads Primitive.(binomial 10 coinweight)
    (return coinweight) *)

let post_single_coin = mh' 700 @@ single_coin

let exact_coin = Primitive.beta 10. 2.

(* 0.833 *)
(* let mn = sample_mean ~n:100 post_single_coin  *)

(* let () = Printf.printf "%f\n" mn *)

(* 
let () =
  let open Owl_plplot in

  let n = 10000 in
  let pl = Plot.create ~m:2 ~n:1 "b1.png" in

  Plot.subplot pl 0 0;
  let pl = hist_dist_continuous ~h:pl ~n post_single_coin in

  Plot.plot_fun ~h:pl (fun x -> (570. /. 4.26) *. (Owl_stats_dist.beta_pdf ~a:10. ~b:2. x)) 0. 1.;

  Plot.subplot pl 1 0;

  Plot.probplot
    ~h:pl
    ~spec:[ MarkerSize 0.25; ]
    ~dist:(Owl_stats_dist.beta_ppf ~a:10. ~b:2.)
    (Owl.(Mat.col (Mat.of_array (take_k_samples n post_single_coin) n 1) 0 ));

  Plot.output pl; *)

;;
(* val single_coin : float dist = Conditional (<fun>, Primitive <abstr>)
val post_single_coin : float dist =
  Ppl__.Dist.Bind
   (Ppl__.Dist.Bind
     (Ppl__.Dist.Bind
       (Ppl__.Dist.Bind (Ppl__.Dist.Bind (Ppl__.Dist.Primitive <abstr>, <fun>),
         <fun>),
       <fun>),
     <fun>),
   <fun>)
val exact_coin : float Primitive.t = <abstr> *)
single_coin;;
(* - : float dist = Conditional (<fun>, Primitive <abstr>) *)
Inference.mh_transform ~burn:1000 single_coin;;
(* - : float dist = Ppl__.Dist.Bind (Ppl__.Dist.Return <poly>, <fun>) *)
let d = Inference.mh_transform ~burn:1000 single_coin;;
(* val d : float dist = Ppl__.Dist.Bind (Ppl__.Dist.Return <poly>, <fun>) *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
sample d;;
(* - : float = 0.86515648357224573 *)
let mh ~burn d =
  let open Core.Sequence.Step in
  let proposal = prior_with_score d in
  let iterate (x, s) =
    let y, r = sample proposal in
    let ratio = if Float.(s = 0.) then 1. else r /. s in
    let accept = sample @@ bernoulli @@ Float.min 1. ratio in
    let next = if accept then (y, r) else (x, s) in
    Yield (next, next)
  in
  let seq = Sequence.unfold_step ~init:(sample proposal) ~f:iterate in
  let seq = Sequence.drop_eagerly seq burn in
  let r = ref seq in
  let sample () =
    match Sequence.next !r with
    | Some (hd, tl) ->
        r := tl;
        fst hd
    | None -> raise Undefined
  in
  sample
;;
(* val mh : burn:int -> 'a dist -> unit -> 'a = <fun> *)
mh ~burn:100 single_coin;;
(* - : unit -> float = <fun> *)
let s = mh ~burn:100 single_coin;;
(* val s : unit -> float = <fun> *)
s ();;#
(* - : float = 0.66665342768343483 *)
s ();;#
(* - : float = 0.66665342768343483 *)
s ();;#
(* - : float = 0.86333576493508546 *)
s ();;#
(* - : float = 0.86333576493508546 *)
s ();;#
(* - : float = 0.7555344981969182 *)
s ();;#
(* - : float = 0.7555344981969182 *)
s ();;#
(* - : float = 0.82962676226851217 *)
s ();;#
(* - : float = 0.82962676226851217 *)
s ();;#
(* - : float = 0.82962676226851217 *)
s ();;#
(* - : float = 0.82962676226851217 *)
s ();;#
(* - : float = 0.82962676226851217 *)
s ();;#
(* - : float = 0.82962676226851217 *)
s ();;#
(* - : float = 0.82962676226851217 *)
s ();;#
(* - : float = 0.95956651632663947 *)
s ();;#
(* - : float = 0.95956651632663947 *)
s ();;#
(* - : float = 0.95956651632663947 *)
s ();;#
(* - : float = 0.949046849726943 *)
s ();;#
(* - : float = 0.610672943203401 *)
s ();;#
(* - : float = 0.610672943203401 *)
s ();;#
(* - : float = 0.610672943203401 *)
s ();;#
(* - : float = 0.610672943203401 *)
s ();;#
(* - : float = 0.67755300520862294 *)
s ();;#
(* - : float = 0.79508632905666865 *)
s ();;#
(* - : float = 0.79508632905666865 *)
s ();;#
(* - : float = 0.79508632905666865 *)
s ();;#
(* - : float = 0.79508632905666865 *)
s ();;#
(* - : float = 0.79508632905666865 *)
s ();;#
(* - : float = 0.79508632905666865 *)
s ();;#
(* - : float = 0.83013329464712493 *)
s ();;#
(* - : float = 0.83013329464712493 *)
s ();;#
(* - : float = 0.75262115144930342 *)
s ();;#
(* - : float = 0.75262115144930342 *)
s ();;#
(* - : float = 0.75262115144930342 *)
s ();;#
(* - : float = 0.75262115144930342 *)
(* Array.init 1000 ~f:s;; *)
(* Line 1, characters 19-20:
Error: This expression has type unit -> float
       but an expression was expected of type int -> 'a
       Type unit is not compatible with type int *)
(* Array.init 1000 ~f:(_ -> s);; *)
(* Error: Syntax error: wildcard "_" not expected *)
Array.init 10000 ~f:(fun _ -> s ());;
(* - : float array =
[|0.75262115144930342; 0.75262115144930342; 0.80618347944835744;
  0.80618347944835744; 0.80618347944835744; 0.80618347944835744;
  0.80618347944835744; 0.80618347944835744; 0.80618347944835744;
  0.94906466266817058; 0.94906466266817058; 0.91098088838881364;
  0.91098088838881364; 0.91098088838881364; 0.90659251853511491;
  0.90659251853511491; 0.90659251853511491; 0.90659251853511491;
  0.90659251853511491; 0.90659251853511491; 0.9640216573523408;
  0.803112661420161; 0.946027650718118; 0.78630556370744142;
  0.78630556370744142; 0.90929887721065872; 0.90929887721065872;
  0.90929887721065872; 0.78307558917046427; 0.856067971292899;
  0.6127459925163411; 0.59592402111644016; 0.87343011048469466;
  0.560701721478417; 0.57940484783132673; 0.62772787097555771;
  0.62772787097555771; 0.62772787097555771; 0.62772787097555771;
  0.62772787097555771; 0.62772787097555771; 0.62772787097555771;
  0.62772787097555771; 0.78259747889419029; 0.78259747889419029;
  0.78259747889419029; 0.58552275751380312; 0.56965674915575815;
  0.73987134702966351; 0.78952907509858; 0.90725633965508456;
  0.90725633965508456; 0.90725633965508456; 0.90725633965508456;
  0.90725633965508456; 0.90725633965508456; 0.96579576748558227;
  0.96579576748558227; 0.96579576748558227; 0.96579576748558227;
  0.8745719273282615; 0.8745719273282615; 0.8745719273282615;
  0.95930440909213022; 0.47005542099244318; 0.98035971726764914;
  0.98035971726764914; 0.98035971726764914; 0.98035971726764914;
  0.98035971726764914; 0.82605297323922933; 0.750032154785011;
  0.74046671500906036; 0.74046671500906036; 0.91655013568619037;
  0.93554087377515172; 0.93554087377515172; 0.93554087377515172;
  0.93554087377515172; 0.93554087377515172; 0.93554087377515172;
  0.93554087377515172; 0.943750333027856; 0.943750333027856; 0.943750333027856;
  0.943750333027856; 0.943750333027856; 0.943750333027856; 0.943750333027856;
  0.91895289950048387; 0.88338421329003392; 0.89698719673254224;
  0.89698719673254224; 0.89698719673254224; 0.89698719673254224;
  0.89698719673254224; 0.89698719673254224; 0.89698719673254224;
  0.89698719673254224; 0.89698719673254224; 0.89698719673254224;
  0.73072646854695078; 0.73072646854695078; 0.73072646854695078;
  0.73072646854695078; 0.73072646854695078; 0.73072646854695078;
  0.73072646854695078; 0.73072646854695078; 0.73072646854695078;
  0.73072646854695078; 0.73072646854695078; 0.73072646854695078;
  0.73072646854695078; 0.88115017322850187; 0.88115017322850187;
  0.88115017322850187; 0.88115017322850187; 0.67299544314690762;
  0.67299544314690762; 0.67299544314690762; 0.84957335257194311;
  0.84957335257194311; 0.84957335257194311; 0.84957335257194311;
  0.84957335257194311; 0.76392198953868873; 0.76392198953868873;
  0.76392198953868873; 0.76392198953868873; 0.76392198953868873;
  0.76392198953868873; 0.85959487940641; 0.72143180964547948;
  0.72143180964547948; 0.78698001703875609; 0.78698001703875609;
  0.78698001703875609; 0.76794312469846171; 0.76794312469846171;
  0.76794312469846171; 0.76794312469846171; 0.90010065839162579;
  0.79325487413286577; 0.69600900674611543; 0.69600900674611543;
  0.69600900674611543; 0.93592999291977141; 0.93592999291977141;
  0.93592999291977141; 0.93592999291977141; 0.93592999291977141;
  0.93592999291977141; 0.77226239577221278; 0.77226239577221278;
  0.77226239577221278; 0.77226239577221278; 0.83954967764195743;
  0.83954967764195743; 0.83954967764195743; 0.83954967764195743;
  0.83954967764195743; 0.83954967764195743; 0.83954967764195743;
  0.96518193021537313; 0.96518193021537313; 0.96518193021537313;
  0.83807947738982724; 0.83807947738982724; 0.83807947738982724;
  0.82615186293287013; 0.94920298269698467; 0.94920298269698467;
  0.94920298269698467; 0.94920298269698467; 0.94920298269698467;
  0.94920298269698467; 0.94778023961646951; 0.94778023961646951;
  0.82523922129190508; 0.82523922129190508; 0.82523922129190508;
  0.82523922129190508; 0.82523922129190508; 0.91837976638189978;
  0.91837976638189978; 0.63271291429007259; 0.63271291429007259;
  0.63271291429007259; 0.91444142649752125; 0.91444142649752125;
  0.91444142649752125; 0.91444142649752125; 0.91444142649752125;
  0.772900419024029; 0.772900419024029; 0.772900419024029; 0.817546078659954;
  0.81006387081231546; 0.81006387081231546; 0.81006387081231546;
  0.81006387081231546; 0.81006387081231546; 0.81006387081231546;
  0.81006387081231546; 0.7852596854291064; 0.7852596854291064;
  0.7852596854291064; 0.7852596854291064; 0.78015001625291769;
  0.69929032090569154; 0.69929032090569154; 0.86104102336360167;
  0.87151996555540712; 0.87151996555540712; 0.87151996555540712;
  0.87151996555540712; 0.87151996555540712; 0.87151996555540712;
  0.719408879456904; 0.655769943878001; 0.98279966110894446;
  0.98279966110894446; 0.98279966110894446; 0.98279966110894446;
  0.98279966110894446; 0.98279966110894446; 0.88704821581185056;
  0.88704821581185056; 0.88704821581185056; 0.88704821581185056;
  0.88704821581185056; 0.88704821581185056; 0.88704821581185056;
  0.88704821581185056; 0.88704821581185056; 0.88704821581185056;
  0.95314642017547657; 0.95314642017547657; 0.95314642017547657;
  0.94050394742295707; 0.94050394742295707; 0.94050394742295707;
  0.65830922468060382; 0.75447054876817166; 0.75447054876817166;
  0.75447054876817166; 0.75447054876817166; 0.75447054876817166;
  0.55518511881939725; 0.62956558275724894; 0.62956558275724894;
  0.99370104353728261; 0.76895680180028; 0.65794306822538917;
  0.90532405136742722; 0.90532405136742722; 0.90532405136742722;
  0.90532405136742722; 0.90532405136742722; 0.83101956565655288;
  0.83101956565655288; 0.83101956565655288; 0.85409996655166609;
  0.85409996655166609; 0.843677805933095; 0.843677805933095;
  0.78727034870238755; 0.78727034870238755; 0.78727034870238755;
  0.78727034870238755; 0.78727034870238755; 0.78727034870238755;
  0.78727034870238755; 0.78727034870238755; 0.8920443171849578;
  0.8920443171849578; 0.8920443171849578; 0.8920443171849578;
  0.8920443171849578; 0.90136715651055965; 0.67548528073250436;
  0.843686814849192; 0.843686814849192; 0.97825077897362667;
  0.97825077897362667; 0.75449235801456782; 0.75449235801456782;
  0.75449235801456782; 0.75449235801456782; 0.75449235801456782;
  0.985712712627303; 0.985712712627303; 0.985712712627303; 0.69074253125366347;
  0.69074253125366347; 0.69074253125366347; ...|] *)
let a = Array.init 10000 ~f:(fun _ -> s ());;
(* val a : float array =
  [|0.89016343580795532; 0.89016343580795532; 0.89016343580795532;
    0.89016343580795532; 0.89016343580795532; 0.89016343580795532;
    0.89016343580795532; 0.89016343580795532; 0.89016343580795532;
    0.89016343580795532; 0.95847862073184886; 0.95847862073184886;
    0.95847862073184886; 0.879542821757389; 0.879542821757389;
    0.879542821757389; 0.879542821757389; 0.879542821757389; 0.879542821757389;
    0.879542821757389; 0.879542821757389; 0.879542821757389; 0.879542821757389;
    0.879542821757389; 0.879542821757389; 0.879542821757389; 0.879542821757389;
    0.879542821757389; 0.75446961744559682; 0.75446961744559682;
    0.75446961744559682; 0.75446961744559682; 0.75446961744559682;
    0.75446961744559682; 0.75446961744559682; 0.89479377071717614;
    0.95527398701647159; 0.95527398701647159; 0.95527398701647159;
    0.66588904421447992; 0.93094937408597889; 0.93094937408597889;
    0.93094937408597889; 0.93094937408597889; 0.93094937408597889;
    0.93094937408597889; 0.93094937408597889; 0.93094937408597889;
    0.93094937408597889; 0.93094937408597889; 0.93094937408597889;
    0.93094937408597889; 0.93094937408597889; 0.81758285658843421;
    0.62046359261042983; 0.62046359261042983; 0.77337683126641832;
    0.77337683126641832; 0.77337683126641832; 0.62244780865089222;
    0.62244780865089222; 0.62244780865089222; 0.62244780865089222;
    0.99416405195234436; 0.99416405195234436; 0.99416405195234436;
    0.99416405195234436; 0.822649074909894; 0.822649074909894;
    0.822649074909894; 0.822649074909894; 0.822649074909894; 0.822649074909894;
    0.84046497751038174; 0.69335735046615765; 0.69335735046615765;
    0.77917776228375213; 0.77917776228375213; 0.77917776228375213;
    0.823263829067178; 0.823263829067178; 0.96414402824923029;
    0.96414402824923029; 0.96414402824923029; 0.92333063970397478;
    0.92333063970397478; 0.92333063970397478; 0.92333063970397478;
    0.85945888465723463; 0.85945888465723463; 0.89220065388181258;
    0.89220065388181258; 0.89220065388181258; 0.89220065388181258;
    0.89220065388181258; 0.89220065388181258; 0.89220065388181258;
    0.89220065388181258; 0.72430607390690271; 0.72430607390690271;
    0.92707743703552459; 0.92707743703552459; 0.92707743703552459;
    0.95139597960547451; 0.95139597960547451; 0.95139597960547451;
    0.95139597960547451; 0.8318271920624718; 0.8318271920624718;
    0.8318271920624718; 0.61665279223040048; 0.66669348479870094;
    0.66669348479870094; 0.66669348479870094; 0.66669348479870094;
    0.66669348479870094; 0.66669348479870094; 0.818409333428929;
    0.818409333428929; 0.818409333428929; 0.86069225749482681;
    0.89515766219588877; 0.89515766219588877; 0.89515766219588877;
    0.89515766219588877; 0.6587420757065392; 0.83337937733935641;
    0.96848962874349431; 0.98702599783125944; 0.98702599783125944;
    0.98702599783125944; 0.98702599783125944; 0.93424180195067119;
    0.93424180195067119; 0.93424180195067119; 0.88920643760105744;
    0.88920643760105744; 0.88920643760105744; 0.88920643760105744;
    0.83927084175852851; 0.8844971249076764; 0.8844971249076764;
    0.8844971249076764; 0.86525950531132045; 0.86525950531132045;
    0.81124231703841176; 0.81124231703841176; 0.81124231703841176;
    0.7971232318778344; 0.9534457842711; 0.9534457842711; 0.9534457842711;
    0.9534457842711; 0.9534457842711; 0.9534457842711; 0.88077992198075628;
    0.88077992198075628; 0.88077992198075628; 0.88077992198075628;
    0.88077992198075628; 0.88077992198075628; 0.88077992198075628;
    0.70521326146675578; 0.70521326146675578; 0.70521326146675578;
    0.70521326146675578; 0.70521326146675578; 0.61934868912663044;
    0.61934868912663044; 0.61934868912663044; 0.786068214519431;
    0.786068214519431; 0.786068214519431; 0.786068214519431; 0.786068214519431;
    0.75477883190726369; 0.86243697159514687; 0.86243697159514687;
    0.86243697159514687; 0.86243697159514687; 0.8208609309096031;
    0.86453538547841258; 0.86453538547841258; 0.86453538547841258;
    0.86453538547841258; 0.86453538547841258; 0.90281689397590625;
    0.90281689397590625; 0.90281689397590625; 0.89453872314061478;
    0.9206258880255338; 0.9206258880255338; 0.9206258880255338;
    0.9206258880255338; 0.78798831901233368; 0.90746840390084971;
    0.98194010648455943; 0.98194010648455943; 0.69632309388749369;
    0.69632309388749369; 0.69632309388749369; 0.90196006253873;
    0.90196006253873; 0.90196006253873; 0.90196006253873; 0.90196006253873;
    0.90196006253873; 0.75620891171419269; 0.75620891171419269;
    0.75620891171419269; 0.75620891171419269; 0.75620891171419269;
    0.75620891171419269; 0.87760857606251; 0.87760857606251; 0.87760857606251;
    0.87760857606251; 0.87760857606251; 0.87760857606251; 0.87760857606251;
    0.87760857606251; 0.87760857606251; 0.87760857606251; 0.87760857606251;
    0.87760857606251; 0.74691285978698008; 0.74691285978698008;
    0.74691285978698008; 0.74691285978698008; 0.630475914951059;
    0.901085561351172; 0.901085561351172; 0.901085561351172; 0.901085561351172;
    0.901085561351172; 0.901085561351172; 0.81656056824525836;
    0.81656056824525836; 0.81656056824525836; 0.81656056824525836;
    0.81656056824525836; 0.81656056824525836; 0.81656056824525836;
    0.81656056824525836; 0.81656056824525836; 0.81656056824525836;
    0.81656056824525836; 0.81656056824525836; 0.81656056824525836;
    0.81656056824525836; 0.81656056824525836; 0.74451635352906687;
    0.74451635352906687; 0.74451635352906687; 0.74451635352906687;
    0.74451635352906687; 0.69059379042372893; 0.91120736624840815;
    0.91120736624840815; 0.91120736624840815; 0.91120736624840815;
    0.91120736624840815; 0.91120736624840815; 0.89119134631268482;
    0.89119134631268482; 0.89119134631268482; 0.80573074515111065;
    0.80573074515111065; 0.84340870982115357; 0.84340870982115357;
    0.84340870982115357; 0.84340870982115357; 0.7664087688937804;
    0.7664087688937804; 0.7664087688937804; 0.7664087688937804;
    0.77452359459701081; 0.77452359459701081; 0.77452359459701081;
    0.90647950556745738; 0.90647950556745738; 0.90647950556745738;
    0.90647950556745738; 0.90647950556745738; 0.90647950556745738;
    0.90647950556745738; 0.80755903171551391; 0.80755903171551391;
    0.60890949345401246; 0.77910697967258913; 0.77910697967258913;
    0.83734882246641185; 0.83734882246641185; 0.83734882246641185;
    0.83734882246641185; 0.83734882246641185; 0.83734882246641185; ...|] *)
Owl.Stats.mean a;;
(* - : float = 0.83373522020392921 *)
Owl.Stats.mean a;;
(* - : float = 0.83373522020392921 *)
Owl.Stats.mean a;;
(* - : float = 0.83373522020392921 *)
Owl.Stats.mean a;;
(* - : float = 0.83373522020392921 *)
time;;
(* - : (unit -> 'a) -> 'a * float = <fun> *)
time s;;
(* - : float * float = (0.82852614341036557, 0.06008148193359375) *)
time s;;
(* - : float * float = (0.82852614341036557, 0.04482269287109375) *)
time s;;
(* - : float * float = (0.82852614341036557, 0.11610984802246094) *)
time s;;
(* - : float * float = (0.82852614341036557, 0.055074691772460938) *)
time s;;
(* - : float * float = (0.77022283681906356, 0.0782012939453125) *)
time s;;
(* - : float * float = (0.69262567737433722, 0.096082687377929688) *)
time s;;
(* - : float * float = (0.69262567737433722, 0.37503242492675781) *)
time s;;
(* - : float * float = (0.69262567737433722, 0.065088272094726562) *)
time s;;
(* - : float * float = (0.69262567737433722, 0.13208389282226562) *)
time s;;
(* - : float * float = (0.74671880592282835, 0.1049041748046875) *)
time s;;
(* - : float * float = (0.74671880592282835, 0.079870223999023438) *)
time s;;
(* - : float * float = (0.781821528398856, 0.086069107055664062) *)
time s;;
(* - : float * float = (0.781821528398856, 0.1068115234375) *)
time s;;
(* - : float * float = (0.781821528398856, 0.092983245849609375) *)
time s;;
(* - : float * float = (0.69645786534446708, 0.10085105895996094) *)
time s;;
(* - : float * float = (0.74295885622104607, 0.077009201049804688) *)
time s;;
(* - : float * float = (0.74295885622104607, 0.14805793762207031) *)
time s;;
(* - : float * float = (0.80878106756340273, 0.14495849609375) *)
time s;;
(* - : float * float = (0.93117243166341734, 0.14495849609375) *)
time s;;
(* - : float * float = (0.93117243166341734, 0.086069107055664062) *)
time s;;
(* - : float * float = (0.93117243166341734, 0.11801719665527344) *)
time s;;
(* - : float * float = (0.96637900731674842, 0.10704994201660156) *)
time s;;
(* - : float * float = (0.96637900731674842, 0.087976455688476562) *)
time s;;
(* - : float * float = (0.96163369388357589, 0.091075897216796875) *)
time s;;
(* - : float * float = (0.96163369388357589, 0.10704994201660156) *)
time s;;
(* - : float * float = (0.96163369388357589, 0.058889389038085938) *)
time (fun () -> Array.init 10000 ~f:(fun _ -> s ()));;
(* - : float array * float =
([|0.96163369388357589; 0.8247471372188877; 0.83214378120194743;
   0.83214378120194743; 0.83274625889788056; 0.83274625889788056;
   0.83274625889788056; 0.83274625889788056; 0.83274625889788056;
   0.83274625889788056; 0.83274625889788056; 0.83274625889788056;
   0.84412692925988853; 0.84412692925988853; 0.84412692925988853;
   0.84412692925988853; 0.84412692925988853; 0.84412692925988853;
   0.921911428431494; 0.71478107192432072; 0.71478107192432072;
   0.71478107192432072; 0.71478107192432072; 0.71478107192432072;
   0.71478107192432072; 0.71478107192432072; 0.71478107192432072;
   0.71478107192432072; 0.71478107192432072; 0.71478107192432072;
   0.71478107192432072; 0.90399915489926919; 0.90399915489926919;
   0.90399915489926919; 0.90399915489926919; 0.80364115135829;
   0.94093236302512984; 0.94093236302512984; 0.94093236302512984;
   0.8358017671471; 0.8358017671471; 0.81832693024033842; 0.82178959129885532;
   0.82178959129885532; 0.82178959129885532; 0.82178959129885532;
   0.82178959129885532; 0.82178959129885532; 0.82178959129885532;
   0.82178959129885532; 0.82178959129885532; 0.82178959129885532;
   0.82178959129885532; 0.82178959129885532; 0.82178959129885532;
   0.82178959129885532; 0.82178959129885532; 0.82178959129885532;
   0.82178959129885532; 0.82178959129885532; 0.79915850139203448;
   0.79915850139203448; 0.92009547467345731; 0.92551844774873893;
   0.92551844774873893; 0.88321388999075023; 0.88321388999075023;
   0.88321388999075023; 0.88321388999075023; 0.88321388999075023;
   0.88321388999075023; 0.87229269041500346; 0.87229269041500346;
   0.87229269041500346; 0.87229269041500346; 0.87229269041500346;
   0.87229269041500346; 0.87229269041500346; 0.87229269041500346;
   0.87229269041500346; 0.87229269041500346; 0.87229269041500346;
   0.76485406089687114; 0.76485406089687114; 0.76485406089687114;
   0.76485406089687114; 0.76485406089687114; 0.76485406089687114;
   0.76485406089687114; 0.83212419572102936; 0.82902286872943465;
   0.82902286872943465; 0.82902286872943465; 0.82902286872943465;
   0.82902286872943465; 0.82902286872943465; 0.82902286872943465;
   0.82902286872943465; 0.81435997640117075; 0.86221164671290007;
   0.95562842999483188; 0.95562842999483188; 0.834077446915693;
   0.834077446915693; 0.9065949294964305; 0.61714945794482468;
   0.61714945794482468; 0.60249446090368886; 0.60249446090368886;
   0.56108990604083286; 0.799253811547359; 0.799253811547359;
   0.799253811547359; 0.799253811547359; 0.92710415062659979;
   0.92710415062659979; 0.92710415062659979; 0.92710415062659979;
   0.92710415062659979; 0.92710415062659979; 0.92710415062659979;
   0.94407346796804892; 0.98167499550191573; 0.95720512092979748;
   0.93696634097419829; 0.93696634097419829; 0.93696634097419829;
   0.93696634097419829; 0.93696634097419829; 0.93696634097419829;
   0.93696634097419829; 0.82539248578841629; 0.82539248578841629;
   0.82539248578841629; 0.86428325573547815; 0.86428325573547815;
   0.86428325573547815; 0.86428325573547815; 0.86428325573547815;
   0.86428325573547815; 0.86428325573547815; 0.86428325573547815;
   0.86428325573547815; 0.86428325573547815; 0.71941452234038494;
   0.76023193210368789; 0.76023193210368789; 0.76023193210368789;
   0.97155314753101052; 0.97155314753101052; 0.87410463110406522;
   0.87410463110406522; 0.82965435735640447; 0.82965435735640447;
   0.82965435735640447; 0.85323776766966042; 0.85323776766966042;
   0.85323776766966042; 0.85323776766966042; 0.85323776766966042;
   0.85323776766966042; 0.85323776766966042; 0.85323776766966042;
   0.81712127658937161; 0.81712127658937161; 0.96225606020592525;
   0.96225606020592525; 0.96225606020592525; 0.96225606020592525;
   0.96225606020592525; 0.96225606020592525; 0.96225606020592525;
   0.96225606020592525; 0.96225606020592525; 0.96225606020592525;
   0.96225606020592525; 0.96225606020592525; 0.96225606020592525;
   0.96225606020592525; 0.78709220904556387; 0.78709220904556387;
   0.9219887172621648; 0.9219887172621648; 0.9219887172621648;
   0.90604647013965212; 0.90604647013965212; 0.90604647013965212;
   0.90604647013965212; 0.90604647013965212; 0.90604647013965212;
   0.90604647013965212; 0.90604647013965212; 0.90604647013965212;
   0.66542593917470094; 0.66542593917470094; 0.66542593917470094;
   0.66542593917470094; 0.66542593917470094; 0.67459979040422469;
   0.67459979040422469; 0.75919480965454011; 0.57619814122472846;
   0.57619814122472846; 0.57619814122472846; 0.63517212253882827;
   0.7935795895274681; 0.7935795895274681; 0.7935795895274681;
   0.7935795895274681; 0.8956446600834943; 0.8956446600834943;
   0.83209066857399672; 0.83209066857399672; 0.83209066857399672;
   0.83209066857399672; 0.83209066857399672; 0.801902179327305;
   0.801902179327305; 0.801902179327305; 0.801902179327305; 0.801902179327305;
   0.801902179327305; 0.78910600295968025; 0.78910600295968025;
   0.78910600295968025; 0.78910600295968025; 0.78910600295968025;
   0.78910600295968025; 0.78910600295968025; 0.90338110548988471;
   0.90338110548988471; 0.71341461029681719; 0.71341461029681719;
   0.71341461029681719; 0.99469884461599845; 0.6093944002896069;
   0.62974030609003739; 0.76826214086456734; 0.76826214086456734;
   0.76826214086456734; 0.76826214086456734; 0.76826214086456734;
   0.77391605469722213; 0.9569228023655999; 0.9569228023655999;
   0.9569228023655999; 0.9569228023655999; 0.9569228023655999;
   0.9569228023655999; 0.9569228023655999; 0.9569228023655999;
   0.9569228023655999; 0.9569228023655999; 0.9569228023655999;
   0.9569228023655999; 0.9569228023655999; 0.81168985758248946;
   0.81168985758248946; 0.50286033761288518; 0.87353426471202034;
   0.87353426471202034; 0.87353426471202034; 0.87353426471202034;
   0.87353426471202034; 0.87353426471202034; 0.87353426471202034;
   0.87353426471202034; 0.87353426471202034; 0.87353426471202034;
   0.87353426471202034; 0.87353426471202034; 0.87353426471202034;
   0.76368980476718629; 0.75185923458818793; 0.75185923458818793;
   0.95900045706867254; 0.94853838089586662; 0.70072207453211821;
   0.70072207453211821; 0.70072207453211821; 0.70072207453211821;
   0.70072207453211821; 0.70072207453211821; 0.63557825531707568;
   0.63557825531707568; 0.63557825531707568; 0.88076925857010513;
   0.88076925857010513; 0.849334268795637; 0.849334268795637;
   0.849334268795637; 0.84873270030336745; 0.81993919536935611;
   0.81993919536935611; 0.94487875186486137; 0.94487875186486137; ...|],
 ...) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r;;
(* - : float = 140.61999320983887 *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r;;
(* - : float = 143.25904846191406 *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r;;
(* - : float = 134.24897193908691 *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r;;
(* - : float = 129.45294380187988 *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r;;
(* - : float = 135.02812385559082 *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r;;
(* - : float = 132.22503662109375 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 15.686988830566406 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 15.418052673339844 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 14.71710205078125 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 15.275955200195312 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 18.037080764770508 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 12.977123260498047 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 14.533042907714844 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 14.229059219360352 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 16.8759822845459 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 21.600961685180664 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 17.946004867553711 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 21.269083023071289 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 28.575897216796875 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 50.666093826293945 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 20.524978637695312 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 25.435924530029297 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 16.247987747192383 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 20.565986633300781 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 38.959026336669922 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 16.855955123901367 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 22.547006607055664 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 14.21809196472168 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 18.095970153808594 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 21.340131759643555 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 29.900789260864258 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 14.515876770019531 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 17.903804779052734 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 18.124103546142578 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 25.142908096313477 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r;;
(* - : float = 44.974803924560547 *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (17.795085906982422, 0.830923486818076) *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (19.26112174987793, 0.831898636417905) *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (15.907049179077148, 0.84145342481682439) *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (13.450145721435547, 0.84748427511506741) *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (19.241809844970703, 0.84092863534063256) *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (14.336109161376953, 0.83894966422835116) *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (15.317201614379883, 0.84009733955401433) *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (23.439168930053711, 0.82744764147802408) *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (22.889137268066406, 0.84428898109222927) *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (17.833948135375977, 0.8282423123128807) *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (22.3391056060791, 0.83827252892061788) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (139.1599178314209, 0.8303646512286883) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (140.11502265930176, 0.83500980920058576) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (150.4359245300293, 0.83383369102099147) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (135.84494590759277, 0.833899637453118) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (147.71604537963867, 0.82986227979005212) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (147.53508567810059, 0.8349717291227482) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (161.77201271057129, 0.83307323507020969) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (144.3028450012207, 0.83641396208859953) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (147.51291275024414, 0.82911037351282246) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (142.4410343170166, 0.83281515725201594) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (144.95587348937988, 0.83458291298124987) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (157.86600112915039, 0.8342646981042473) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (150.69913864135742, 0.83077813278003121) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (144.87910270690918, 0.83408265379899627) *)
let x,r = time (fun () -> Array.init 10000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (149.000883102417, 0.83747073796581639) *)
let x,r = time (fun () -> Array.init 1000 ~f:(fun _ -> s ())) in r, Owl_stats.mean x;;
(* - : float * float = (17.33708381652832, 0.81786035430870485) *)
let mh_transform ~burn d =
  let open Core.Sequence.Step in
  let proposal = prior_with_score d in
  let iterate (x, s) =
    let y, r = sample proposal in
    let ratio = if Float.(s = 0.) then 1. else r /. s in
    let accept = sample @@ bernoulli @@ Float.min 1. ratio in
    let next = if accept then (y, r) else (x, s) in
    Yield (next, next)
  in
  let seq = Sequence.unfold_step ~init:(sample proposal) ~f:iterate in
  let seq = Sequence.drop_eagerly seq burn in
  (* burn initial states *)
  let r = ref seq in
  let sample () =
    match Sequence.next !r with
    | Some (hd, tl) ->
      r := tl;
      fst hd
    | None -> raise Undefined
  in
  let* _ = return () in
  return (sample ())
;;
(* val mh_transform : burn:int -> 'a dist -> 'a dist = <fun> *)
mh_transform ~burn:100 single_coin;;
(* - : float dist = Bind (Return <poly>, <fun>) *)
let d = mh_transform ~burn:100 single_coin;;
(* val d : float dist = Bind (Return <poly>, <fun>) *)
sample d;;
(* - : float = 0.86329740748351846 *)
let d = mh_transform ~burn:100 single_coin;;
(* val d : float dist = Bind (Return <poly>, <fun>) *)
sample d;;
(* - : float = 0.87443613071796389 *)
sample d;;
(* - : float = 0.87443613071796389 *)
sample d;;
(* - : float = 0.87443613071796389 *)
sample d;;
(* - : float = 0.87443613071796389 *)
sample d;;
(* - : float = 0.87443613071796389 *)
sample d;;
(* - : float = 0.87443613071796389 *)
sample d;;
(* - : float = 0.87443613071796389 *)
sample d;;
(* - : float = 0.87443613071796389 *)
sample d;;
(* - : float = 0.87443613071796389 *)
sample d;;
(* - : float = 0.8716439981646007 *)
sample d;;
(* - : float = 0.87423671290144245 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.88437716217813478 *)
sample d;;
(* - : float = 0.84751375854190292 *)
sample d;;
(* - : float = 0.91781964593516185 *)
sample d;;
(* - : float = 0.91781964593516185 *)
sample d;;
(* - : float = 0.69949752131930965 *)
sample d;;
(* - : float = 0.66653076644673259 *)
sample d;;
(* - : float = 0.85254714168900325 *)
sample d;;
(* - : float = 0.85254714168900325 *)
sample d;;
(* - : float = 0.85254714168900325 *)
sample d;;
(* - : float = 0.85254714168900325 *)
sample d;;
(* - : float = 0.85254714168900325 *)
sample d;;
(* - : float = 0.85254714168900325 *)
sample d;;
(* - : float = 0.85254714168900325 *)
sample d;;
(* - : float = 0.85254714168900325 *)
sample d;;
(* - : float = 0.85254714168900325 *)
sample d;;
(* - : float = 0.85254714168900325 *)
sample d;;
(* - : float = 0.85254714168900325 *)
sample d;;
(* - : float = 0.85254714168900325 *)
take_k_samples 100 d;;
(* - : float array =
[|0.82303199447296371; 0.82303199447296371; 0.82303199447296371;
  0.82303199447296371; 0.8334994092195992; 0.8334994092195992;
  0.8334994092195992; 0.8334994092195992; 0.8334994092195992;
  0.8334994092195992; 0.8334994092195992; 0.8334994092195992;
  0.8334994092195992; 0.8334994092195992; 0.8334994092195992;
  0.8334994092195992; 0.8334994092195992; 0.8334994092195992;
  0.8334994092195992; 0.84904613202648382; 0.8144154010374135;
  0.8144154010374135; 0.8144154010374135; 0.7404511521431737;
  0.7404511521431737; 0.7404511521431737; 0.76693521853697844;
  0.76693521853697844; 0.76693521853697844; 0.76693521853697844;
  0.74157666059713268; 0.74157666059713268; 0.74157666059713268;
  0.74157666059713268; 0.74157666059713268; 0.89394172557954255;
  0.92447277226589453; 0.92447277226589453; 0.92447277226589453;
  0.75042417127416106; 0.64235781217980148; 0.64235781217980148;
  0.521547459420177; 0.9869185497488171; 0.9869185497488171;
  0.9869185497488171; 0.9869185497488171; 0.54954448261986122;
  0.669741619301434; 0.80091128400548162; 0.82768597030725466;
  0.93926800343656636; 0.93926800343656636; 0.99199598678201339;
  0.99199598678201339; 0.99199598678201339; 0.99199598678201339;
  0.73271821293344674; 0.73271821293344674; 0.70044268078646688;
  0.59394049052939291; 0.77751247137261381; 0.77751247137261381;
  0.77751247137261381; 0.77751247137261381; 0.93526624793542223;
  0.93526624793542223; 0.83485170682772336; 0.83485170682772336;
  0.83485170682772336; 0.83485170682772336; 0.86705755858380751;
  0.86705755858380751; 0.86705755858380751; 0.93482330044145312;
  0.93482330044145312; 0.93482330044145312; 0.93482330044145312;
  0.94099820636701725; 0.94099820636701725; 0.94099820636701725;
  0.906901044050907; 0.847394387435027; 0.847394387435027; 0.847394387435027;
  0.7328711726546453; 0.7328711726546453; 0.7328711726546453;
  0.7328711726546453; 0.79269795068369664; 0.91309818250897767;
  0.91309818250897767; 0.91309818250897767; 0.91309818250897767;
  0.91309818250897767; 0.91309818250897767; 0.91309818250897767;
  0.91309818250897767; 0.91309818250897767; 0.87035233314855776|] *)
(* Owl_statake_k_samples 100 d;; *)
(* Error: Syntax error *)
(* Owl_stats.mean @@ ake_k_samples 100 d;; *)
(* Line 1, characters 18-31:
Error: Unbound value ake_k_samples
Hint: Did you mean take_k_samples? *)
Owl_stats.mean @@ take_k_samples 100 d;;
(* - : float = 0.81203847717075572 *)
Owl_stats.mean @@ take_k_samples 100 d;;
(* - : float = 0.85151241319987736 *)
Owl_stats.mean @@ take_k_samples 100 d;;
(* - : float = 0.8391607130363492 *)
Owl_stats.mean @@ take_k_samples 100 d;;
(* - : float = 0.88224913362931678 *)
Owl_stats.mean @@ take_k_samples 1000 d;;
(* - : float = 0.8380425685013283 *)
Owl_stats.mean @@ take_k_samples 1000 d;;
(* - : float = 0.82305160306837666 *)
Owl_stats.mean @@ take_k_samples 1000 d;;
(* - : float = 0.84558885085782709 *)
Owl_stats.mean @@ take_k_samples 1000 d;;
(* - : float = 0.83017256713732479 *)
Owl_stats.mean @@ take_k_samples 1000 d;;
(* - : float = 0.82748285298433222 *)
Owl_stats.mean @@ take_k_samples 1000 d;;
(* - : float = 0.8289411364886774 *)
Owl_stats.mean @@ take_k_samples 1000 d;;
(* - : float = 0.8303202382180187 *)
Owl_stats.mean @@ take_k_samples 2000 d;;
(* - : float = 0.83511586594863718 *)
Owl_stats.mean @@ take_k_samples 2000 d;;
(* - : float = 0.83238964674444693 *)
Owl_stats.mean @@ take_k_samples 2000 d;;
(* - : float = 0.83018306867351876 *)
Owl_stats.mean @@ take_k_samples 2000 d;;
(* - : float = 0.83188335475334441 *)
Owl_stats.mean @@ take_k_samples 2000 d;;
(* - : float = 0.83123419162752954 *)
Owl_stats.mean @@ take_k_samples 2000 d;;
(* - : float = 0.82366532491256184 *)
Owl_stats.mean @@ take_k_samples 2000 d;;
(* - : float = 0.83196054895849914 *)
Owl_stats.mean @@ take_k_samples 2000 d;;
(* - : float = 0.81893271002625956 *)
Owl_stats.mean @@ take_k_samples 2000 d;;
(* - : float = 0.83723625544103308 *)
Owl_stats.mean @@ take_k_samples 2500 d;;
(* - : float = 0.83334814471671093 *)
Owl_stats.mean @@ take_k_samples 2500 d;;
(* - : float = 0.83885193957855331 *)
Owl_stats.mean @@ take_k_samples 2500 d;;
(* - : float = 0.83090793000434116 *)
Owl_stats.mean @@ take_k_samples 2500 d;;
(* - : float = 0.83049773581477349 *)
Owl_stats.mean @@ take_k_samples 2500 d;;
(* - : float = 0.83608446582762641 *)
Owl_stats.mean @@ take_k_samples 2500 d;;
(* - : float = 0.8323047572097515 *)
Owl_stats.mean @@ take_k_samples 2500 d;;
(* - : float = 0.83266680748599153 *)
Owl_stats.mean @@ take_k_samples 2500 d;;
(* - : float = 0.82576918615162631 *)
Owl_stats.mean @@ take_k_samples 2500 d;;
(* - : float = 0.83739186461544346 *)
Owl_stats.mean @@ take_k_samples 2500 d;;
(* - : float = 0.83764727806002937 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.8359775973991691 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.83388926655044637 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.83453613846256047 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.82811096199956313 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.83048487336381294 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.83379628864789779 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.83174883544183142 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.835134189212633 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.83470662219478087 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.83492571737398869 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.83305888320059929 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.829892812982338 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.830194923391704 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.83165340178491387 *)
Owl_stats.mean @@ take_k_samples 10000 d;;
(* - : float = 0.83037678415860738 *)
Owl_stats.mean @@ take_k_samples 100000 d;;
(* - : float = 0.83395633588591012 *)
Owl_stats.mean @@ take_k_samples 100000 d;;
(* - : float = 0.83352368811920985 *)
Owl_stats.mean @@ take_k_samples 100000 d;;
(* - : float = 0.83289376055656594 *)
Owl_stats.mean @@ take_k_samples 200000 d;;
(* - : float = 0.83317851190584957 *)
Owl_stats.mean @@ take_k_samples 200000 d;;
(* - : float = 0.83266122943070064 *)
Owl_stats.mean @@ take_k_samples 200000 d;;
(* - : float = 0.83391561143013615 *)
Owl_stats.mean @@ take_k_samples 200000 d;;
(* - : float = 0.83345163560778734 *)
Owl_stats.mean @@ take_k_samples 200000 d;;
(* - : float = 0.83393372812029964 *)
Owl_stats.mean @@ take_k_samples 200000 d;;
(* - : float = 0.83472303068535592 *)
Owl_stats.mean @@ take_k_samples 200000 d;;
(* - : float = 0.83379225537818247 *)
Owl_stats.std @@ take_k_samples 200000 d;;
(* - : float = 0.10328769976401839 *)
Owl_stats.std @@ take_k_samples 200000 d;;
(* - : float = 0.10393290084122429 *)
(* let mh_transform ~burn d =
  let proposal = prior_with_score d in
  let iterate (x,s) =
    let (y,r) = sample proposal in
    let ratio = if Float.(s = 0.) then 1. else r /. s in
    let accept = sample @@ bernoulli @@ Float.min 1. ratio in
    let next = if accept then (y,r) else (x,s) in
    Yield (return next,next)
  in
  let seq = Sequence.unfold_step 
      ~init:(sample proposal) 
      ~f:iterate 
  in
  let seq = Sequence.drop_eagerly seq burn in (* burn initial *)

  let r = ref seq in
  let* _ = return () in
  match Sequence.next (!r) with 
    Some (hd,tl) -> 
    let* x,_ = hd in
    r:=tl; 
    return x
  | None -> raise Undefined
;; *)
(* Line 8, characters 4-9:
Error: Unbound constructor Yield *)
(* let mh_transform ~burn d =
  let proposal = prior_with_score d in
  let iterate (x,s) =
    let (y,r) = sample proposal in
    let ratio = if Float.(s = 0.) then 1. else r /. s in
    let accept = sample @@ bernoulli @@ Float.min 1. ratio in
    let next = if accept then (y,r) else (x,s) in
    Yield (return next,next)
  in
  let seq = Sequence.unfold_step 
      ~init:(sample proposal) 
      ~f:iterate 
  in
  let seq = Sequence.drop_eagerly seq burn in (* burn initial *)

  let r = ref seq in
  let* _ = return () in
  match Sequence.next (!r) with 
    Some (hd,tl) -> 
    let* x,_ = hd in
    r:=tl; 
    return x
  | None -> raise Undefined
;; *)
(* Line 8, characters 4-9:
Error: Unbound constructor Yield *)
open Core.Sequence.Step;;
let mh_transform ~burn d =
  let proposal = prior_with_score d in
  let iterate (x,s) =
    let (y,r) = sample proposal in
    let ratio = if Float.(s = 0.) then 1. else r /. s in
    let accept = sample @@ bernoulli @@ Float.min 1. ratio in
    let next = if accept then (y,r) else (x,s) in
    Yield (return next,next)
  in
  let seq = Sequence.unfold_step 
      ~init:(sample proposal) 
      ~f:iterate 
  in
  let seq = Sequence.drop_eagerly seq burn in (* burn initial *)

  let r = ref seq in
  let* _ = return () in
  match Sequence.next (!r) with 
    Some (hd,tl) -> 
    let* x,_ = hd in
    r:=tl; 
    return x
  | None -> raise Undefined
;;
(* val mh_transform : burn:int -> 'a dist -> 'a dist = <fun> *)
mh_transform ~burn:1000 d;;
(* - : float dist = Bind (Return <poly>, <fun>) *)
let d' = mh_transform ~burn:1000 d;;
(* val d' : float dist = Bind (Return <poly>, <fun>) *)
sample d';;
(* - : float = 0.841947580185241 *)
sample d';;
(* - : float = 0.841947580185241 *)
sample d';;
(* - : float = 0.841947580185241 *)
sample d';;
(* - : float = 0.841947580185241 *)
sample d';;
(* - : float = 0.75559823907809287 *)
sample d';;
(* - : float = 0.75559823907809287 *)
sample d';;
(* - : float = 0.87967739833511349 *)
sample d';;
(* - : float = 0.87967739833511349 *)
sample d';;
(* - : float = 0.93497438750578421 *)
sample d';;
(* - : float = 0.93497438750578421 *)
sample d';;
(* - : float = 0.93497438750578421 *)
sample d';;
(* - : float = 0.93497438750578421 *)
sample d';;
(* - : float = 0.93497438750578421 *)
sample d';;
(* - : float = 0.93497438750578421 *)
sample d';;
(* - : float = 0.93497438750578421 *)
sample d';;
(* - : float = 0.93497438750578421 *)
sample d';;
(* - : float = 0.93497438750578421 *)
sample d';;
(* - : float = 0.95539648294341672 *)
sample d';;
(* - : float = 0.95539648294341672 *)
sample d';;
(* - : float = 0.95539648294341672 *)
sample d';;
(* - : float = 0.95539648294341672 *)
sample d';;
(* - : float = 0.95539648294341672 *)
sample d';;
(* - : float = 0.7190097951607336 *)
let d' = mh_transform ~burn:1000 d;;
(* val d' : float dist = Bind (Return <poly>, <fun>) *)
let d' = mh_transform ~burn:1000 single_coin;;
(* val d' : float dist = Bind (Return <poly>, <fun>) *)
Owl_stats.mean (take_k_samples 1000 d');;
(* - : float = 0.8242783701294758 *)
Owl_stats.mean (take_k_samples 1000 d');;
(* - : float = 0.84265644296367093 *)
Owl_stats.mean (take_k_samples 1000 d');;
(* - : float = 0.83810855118257621 *)
Owl_stats.mean (take_k_samples 1000 d');;
(* - : float = 0.850192497729136 *)
Owl_stats.mean (take_k_samples 1000 d');;
(* - : float = 0.82797749013057387 *)
Owl_stats.mean (take_k_samples 1000 d');;
(* - : float = 0.8213528700278494 *)
Owl_stats.mean (take_k_samples 1000 d');;
(* - : float = 0.83588099708964092 *)
Owl_stats.mean (take_k_samples 1000 d');;
(* - : float = 0.81885453917431994 *)
Owl_stats.mean (take_k_samples 1000 d');;
(* - : float = 0.83416649113902 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.83410818149708466 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.82984027944238514 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.83394040521870683 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.83459273059074479 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.83648515795792666 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.83330371385647817 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.83183722388610293 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.83205506958017428 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.83579597754031132 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.82960080872361963 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.83292013397328957 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.82983889985527892 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.8349987508533766 *)
Owl_stats.mean (take_k_samples 10000 d');;
(* - : float = 0.83161652810231712 *)
Owl_stats.mean (take_k_samples 100000 d');;
(* - : float = 0.833885887883942 *)
Owl_stats.mean (take_k_samples 100000 d');;
(* - : float = 0.83398247395848035 *)
Owl_stats.mean (take_k_samples 100000 d');;
(* - : float = 0.834250198174305 *)
Owl_stats.mean (take_k_samples 100000 d');;
(* - : float = 0.83303352940399666 *)
Owl_stats.mean (take_k_samples 100000 d');;
(* - : float = 0.83431087264230708 *)
Owl_stats.mean (take_k_samples 1000000 d');;
(* - : float = 0.83327954346423927 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.81179604775314129 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.81648326245054681 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.84393384745901756 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.83462343565528807 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.88448920079145776 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.82610240494974463 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.83250451168336526 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.83224841986835185 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.83145893566577189 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.82183003524593756 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.80598350762063276 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.83769956428969716 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.80011090192247891 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.84381781006087975 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.84474827668740116 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.73503565055202591 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.81506132439362344 *)
Owl_stats.mean (take_k_samples 100 d');;
(* - : float = 0.8330612025393781 *)
(* Owl_stats.mean (take_k_samples 100 (prior single_coin));; *)
(* Line 1, characters 15-55:
Error: This expression has type (float * float) array
       but an expression was expected of type float array
       Type float * float is not compatible with type float *)
(* Owl_stats.mean (take_k_samples 100 (prior (fmap fst single_coin)));; *)
(* Line 1, characters 52-63:
Error: This expression has type float dist
       but an expression was expected of type ('a * 'b) dist
       Type float is not compatible with type 'a * 'b *)
(* Owl_stats.mean (take_k_samples 100 (prior (fmap fst single_coin)));; *)
(* Line 1, characters 52-63:
Error: This expression has type float dist
       but an expression was expected of type ('a * 'b) dist
       Type float is not compatible with type 'a * 'b *)
(* Owl_stats.mean (take_k_samples 100 (prior (fmap fst single_coin))));; *)
(* Error: Syntax error *)
(* Owl_stats.mean (take_k_samples 100 (prior (fmap fst single_coin)));; *)
(* Line 1, characters 52-63:
Error: This expression has type float dist
       but an expression was expected of type ('a * 'b) dist
       Type float is not compatible with type 'a * 'b *)
(* Owl_stats.mean (take_k_samples 100 (prior (fmap fst single_coin)));; *)
(* Line 1, characters 52-63:
Error: This expression has type float dist
       but an expression was expected of type ('a * 'b) dist
       Type float is not compatible with type 'a * 'b *)
(* Owl_stats.mean (take_k_samples 100 (prior (fmap fst single_coin)));; *)
(* Line 1, characters 52-63:
Error: This expression has type float dist
       but an expression was expected of type ('a * 'b) dist
       Type float is not compatible with type 'a * 'b *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.525977275675623 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.51807611237700935 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.51470273183069726 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.49690018497335264 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.51336012297388167 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.46650975430070191 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.51150658295524931 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.46878830349743095 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.53238796412534728 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.44358841549223016 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.4580756526808431 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.52083152538417643 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.56631568373095142 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.4926170739141798 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.51733103580943574 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.47382233070531449 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.533387560882463 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.538409453576526 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.50530260370236413 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.49922734128991786 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.48459637870886285 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.49689930237757485 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.502533492555966 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.47969155421473353 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.44855685555109687 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.53353294069495361 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.53026425015420287 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.44874349200370339 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.51006777399221148 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.51989439934489656 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.510415392341189 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.47504497645074617 *)
Owl_stats.mean (take_k_samples 100 (fmap fst (prior single_coin)));;
(* - : float = 0.530213042942391 *)
Owl_stats.mean (take_k_samples 1000 (fmap fst (prior single_coin)));;
(* - : float = 0.48384400476581513 *)
Owl_stats.mean (take_k_samples 1000 (fmap fst (prior single_coin)));;
(* - : float = 0.50137139907185246 *)
Owl_stats.mean (take_k_samples 1000 (fmap fst (prior single_coin)));;
(* - : float = 0.50184787712242651 *)
Owl_stats.mean (take_k_samples 1000 (fmap fst (prior single_coin)));;
(* - : float = 0.49285474977569071 *)
Owl_stats.mean (take_k_samples 1000 (fmap fst (prior single_coin)));;
(* - : float = 0.50313767001455134 *)
Owl_stats.mean (take_k_samples 1000 (fmap fst (prior single_coin)));;
(* - : float = 0.50109555786850291 *)
Owl_stats.mean (take_k_samples 1000 (fmap fst (prior single_coin)));;
(* - : float = 0.495449768440437 *)
Owl_stats.mean (take_k_samples 1000 (fmap fst (prior single_coin)));;
(* - : float = 0.5157098805454351 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.49971583338727144 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.50121755179253313 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.50116698906732793 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.498790084812043 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.5015567982770166 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.50593485469078547 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.49892186569183194 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.5000391847359108 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.498795399017561 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.49760751378904261 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.4984172659454208 *)
Owl_stats.mean (take_k_samples 10000 (fmap fst (prior single_coin)));;
(* - : float = 0.49569898846193711 *)
Owl_stats.mean (take_k_samples 100000 (fmap fst (prior single_coin)));;
(* - : float = 0.49952987951131872 *)
Owl_stats.mean (take_k_samples 100000 (fmap fst (prior single_coin)));;
(* - : float = 0.49935347671049074 *)
Owl_stats.mean (take_k_samples 100000 (fmap fst (prior single_coin)));;
(* - : float = 0.499687292845582 *)
Owl_stats.mean (take_k_samples 100000 (fmap fst (prior single_coin)));;
(* - : float = 0.49927296397001714 *)
Owl_stats.mean (take_k_samples 100000 (fmap fst (prior single_coin)));;
(* - : float = 0.50003424383889028 *)
Owl_stats.mean (take_k_samples 100000 (fmap fst (prior single_coin)));;
(* - : float = 0.50047662706304386 *)
Owl_stats.mean (take_k_samples 100000 (fmap fst (prior single_coin)));;
(* - : float = 0.50065336819721518 *)
Owl_stats.mean (take_k_samples 100000 (fmap fst (prior single_coin)));;
(* - : float = 0.49998159902052058 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.50017422382300813 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.5000631246387458 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.49995317025111796 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.49987342553706438 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.5002568725798695 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.50007105684949049 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.50014344540559752 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.49962269973981011 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.49920450877152261 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.49978793503488544 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.499583569013607 *)
Owl_stats.mean (take_k_samples 1000000 (fmap fst (prior single_coin)));;
(* - : float = 0.50021604523893126 *)
open Evaluation;;
(* kl_cum_discrete [|0;100;200;300;400;500|] single_coin (Primitive.beta 10. 2.);; *)
(* Line 1, characters 42-53:
Error: This expression has type float dist
       but an expression was expected of type 'a Primitive.t *)
kl_cum_discrete [|0;100;200;300;400;500|] (Primitive.beta 10. 2.) single_coin;;
(* Exception: Ppl__Dist.Undefined.
Raised at file "lib/dist.ml", line 71, characters 32-41
Called from file "lib/evaluation.ml", line 32, characters 33-43
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
kl_cum_discrete [|0;100;200;300;400;500|] (Primitive.beta 10. 2.) single_coin;;
(* Exception: Ppl__Dist.Undefined.
Raised at file "lib/dist.ml", line 71, characters 32-41
Called from file "lib/evaluation.ml", line 32, characters 33-43
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
kl_cum_discrete [|0;100;200;300;400;500|] (Primitive.beta 10. 2.) single_coin;;
(* Exception: Ppl__Dist.Undefined.
Raised at file "lib/dist.ml", line 71, characters 32-41
Called from file "lib/evaluation.ml", line 32, characters 33-43
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
kl_cum_discrete [|0;100;200;300;400;500|] (Primitive.beta 10. 2.) single_coin;;
(* Exception: Ppl__Dist.Undefined.
Raised at file "lib/dist.ml", line 71, characters 32-41
Called from file "lib/evaluation.ml", line 32, characters 33-43
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
kl_cum_discrete [|0;100;200;300;400;500|] (Primitive.beta 10. 2.) single_coin;;
(* Exception: Ppl__Dist.Undefined.
Raised at file "lib/dist.ml", line 71, characters 32-41
Called from file "lib/evaluation.ml", line 32, characters 33-43
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
sample single_coin;;
(* Exception: Ppl__Dist.Undefined.
Raised at file "lib/dist.ml", line 71, characters 32-41
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
sample d;;
(* - : float = 0.73758813430033343 *)
sample d;;
(* - : float = 0.73758813430033343 *)
sample d;;
(* - : float = 0.64510243936560641 *)
kl_cum_discrete [|0;100;200;300;400;500|] (Primitive.beta 10. 2.) d;;
(* - : (int * float) array =
[|(0, -0.2119245810248355); (100, 375.02493504956209);
  (200, 725.20179581488981); (300, 1311.5769690551049);
  (400, 1967.0556196724906); (0, 0.)|] *)
kl_cum_discrete [|0;100;200;300;400;500|] (Primitive.beta 10. 2.) d;;
(* - : (int * float) array =
[|(0, 4.0325426979668775); (100, 383.42178458992123);
  (200, 930.12448047631074); (300, 1442.7602507206109);
  (400, 2180.7614190612112); (0, 0.)|] *)
kl_cum_discrete (Array.init 100 (fun i -> i*30)) (Primitive.beta 10. 2.) d;;
(* - : (int * float) array =
[|(0, 3.041314788798021); (30, 180.07201592092392); (60, 399.97138725300141);
  (90, 479.81317402107413); (120, 673.691697310081); (150, 784.80421582788108);
  (180, 911.76326037035835); (210, 1005.605353003276);
  (240, 1123.2504630895082); (270, 1248.7534130383269);
  (300, 1461.3347448925708); (330, 1600.1895851612398);
  (360, 1726.34508229181); (390, 1917.493220192016); (420, 2114.5390555545105);
  (450, 2324.2284992837176); (480, 2441.1791484146356);
  (510, 2579.558411201634); (540, 2721.1168299160136);
  (570, 2881.5788318988966); (600, 3088.4356077084522);
  (630, 3225.1598112343477); (660, 3355.4412283557067);
  (690, 3444.0086453470863); (720, 3681.0887393937123);
  (750, 3867.6185987501231); (780, 3963.2209747038728);
  (810, 4145.1767770460447); (840, 4334.6398357256385);
  (870, 4593.2601526313565); (900, 4773.4154317603343);
  (930, 4981.7671819439329); (960, 5257.6951844187251);
  (990, 5476.5971994945594); (1020, 5594.9112829002452);
  (1050, 5750.1012940124037); (1080, 5933.9688033169505);
  (1110, 6216.036621329532); (1140, 6414.5515197076393);
  (1170, 6653.4496025345261); (1200, 6807.09570971523);
  (1230, 7050.2558215814843); (1260, 7179.3154870976723);
  (1290, 7388.6407779199462); (1320, 7622.9177328067117);
  (1350, 7865.559047888546); (1380, 8137.25723545802);
  (1410, 8447.3913726780975); (1440, 8664.7580551268711);
  (1470, 8928.8632267591074); (1500, 9154.44863968425);
  (1530, 9382.7739821740179); (1560, 9624.2401853151332);
  (1590, 9885.4123108440817); (1620, 10059.599209403392);
  (1650, 10254.409109333805); (1680, 10485.183480143151);
  (1710, 10743.251951080832); (1740, 10997.558414789735);
  (1770, 11278.217426732912); (1800, 11471.359243545508);
  (1830, 11649.292342563444); (1860, 11896.64852381309);
  (1890, 12051.820280705448); (1920, 12255.966424458629);
  (1950, 12527.316324767933); (1980, 12628.640899979267);
  (2010, 12887.268276837583); (2040, 13194.326074813625);
  (2070, 13335.794563263689); (2100, 13573.394216018387);
  (2130, 13836.411053586); (2160, 14033.008332131005);
  (2190, 14259.296968283277); (2220, 14476.817689192492);
  (2250, 14744.773418175584); (2280, 15113.318788929613);
  (2310, 15235.059631768494); (2340, 15634.181488732003);
  (2370, 15856.582491792911); (2400, 16035.890236588835);
  (2430, 16211.909038647653); (2460, 16717.738202488486);
  (2490, 16996.262826663078); (2520, 17207.412846421179);
  (2550, 17412.885789427859); (2580, 17623.232733126282);
  (2610, 17939.144197673329); (2640, 18187.963659193549);
  (2670, 18379.376202399562); (2700, 18536.159542224013);
  (2730, 18613.288866141982); (2760, 18869.421065548013);
  (2790, 19031.601553727669); (2820, 19297.00765566148);
  (2850, 19494.637055141753); (2880, 19654.43543679018);
  (2910, 19816.223892294362); (2940, 20099.33514497141); (0, ...); ...|] *)
(* Array.map ~f:fst kl_cum_discrete (Array.init 100 (fun i -> i*30)) (Primitive.beta 10. 2.) d;; *)
(* Line 1, characters 0-9:
Error: This function has type 'a array -> f:('a -> 'b) -> 'b array
       It is applied to too many arguments; maybe you forgot a `;'. *)
Array.map ~f:fst @@ kl_cum_discrete (Array.init 100 (fun i -> i*30)) (Primitive.beta 10. 2.) d;;
(* - : int array =
[|0; 30; 60; 90; 120; 150; 180; 210; 240; 270; 300; 330; 360; 390; 420; 450;
  480; 510; 540; 570; 600; 630; 660; 690; 720; 750; 780; 810; 840; 870; 900;
  930; 960; 990; 1020; 1050; 1080; 1110; 1140; 1170; 1200; 1230; 1260; 1290;
  1320; 1350; 1380; 1410; 1440; 1470; 1500; 1530; 1560; 1590; 1620; 1650; 1680;
  1710; 1740; 1770; 1800; 1830; 1860; 1890; 1920; 1950; 1980; 2010; 2040; 2070;
  2100; 2130; 2160; 2190; 2220; 2250; 2280; 2310; 2340; 2370; 2400; 2430; 2460;
  2490; 2520; 2550; 2580; 2610; 2640; 2670; 2700; 2730; 2760; 2790; 2820; 2850;
  2880; 2910; 2940; 0|] *)
Array.map ~f:snd @@ kl_cum_discrete (Array.init 100 (fun i -> i*30)) (Primitive.beta 10. 2.) d;;
(* - : float array =
[|1.1170847974974278; 72.771418261637237; 227.13070523773257;
  388.06034187056548; 596.44061518831688; 702.24768260009489; 911.594273560537;
  1111.4609359967567; 1234.0975916431673; 1316.888886597367;
  1545.1707940515987; 1700.3804602254477; 1975.2762155304856;
  2293.7643437406978; 2460.892189933375; 2624.7510121813493;
  2791.0763035090608; 3000.7892691621678; 3177.9464341233615;
  3316.4172904930851; 3585.4890035873887; 3770.2196614555114;
  3990.8885885733953; 4113.9200842887458; 4301.3626690199671;
  4533.6358696113111; 4739.3471775233356; 4890.9171187649727;
  5088.0569918653337; 5241.4599670625475; 5550.0941180918362;
  5775.2926400817305; 5933.0159799089224; 6137.2233285370057;
  6298.0361399166495; 6572.3398215714033; 6834.62022943651; 7101.9843916919554;
  7328.9613767845149; 7544.10581530602; 7705.2947288409105; 7959.4092659852122;
  8075.4968321207525; 8156.6221916892573; 8381.9944086646337;
  8570.0650391613872; 8830.2730893059888; 9198.8236321954882;
  9480.4438337568863; 9717.8036618759179; 9842.9092709604211;
  10120.375118140124; 10344.326173992577; 10498.147260607395;
  10696.081179541219; 10823.844780671416; 10956.862639779865;
  11154.745740474991; 11410.763969280064; 11740.346037448206;
  11935.141322465923; 12024.441588309355; 12226.620383191288;
  12472.609210592962; 12719.7181528822; 12962.286651740829; 13236.665450627024;
  13511.145749910555; 13790.888804372154; 14023.131785788435;
  14224.847671697622; 14353.627271235002; 14487.95364608929;
  14649.490889118564; 14878.100907304073; 14960.572351704603;
  15183.48431221711; 15495.553506453971; 15780.540095264227;
  16040.549476731321; 16267.13613506503; 16458.201745252452;
  16697.781879491748; 17153.221343601352; 17380.277992767384;
  17602.702783516437; 17801.290979157806; 18047.358939813483;
  18334.442297633053; 18521.641569400119; 18704.455006832384;
  18920.597342039382; 19101.735990150191; 19318.009147073608;
  19560.829939031853; 19745.832628448898; 20024.039491262411;
  20272.328062428405; 20616.601153573116; 0.|] *)
Array.map ~f:snd @@ kl_cum_discrete (Array.init 100 (fun i -> i*30)) (Primitive.beta 10. 2.) d;;
(* - : float array =
[|5.9772376530693441; 79.149708137068274; 254.855153765864; 336.21977669105257;
  438.42720521915572; 588.60808373372311; 724.0250831882455; 839.329943666982;
  993.615819042712; 1222.732732908162; 1316.8765067141885; 1550.6155262029167;
  1717.2704075227839; 1886.5998090221765; 2147.7068830265448;
  2264.1047133418324; 2508.8547984975025; 2694.7652008403829;
  2866.2990346000188; 3040.7398532525581; 3165.2436811888192;
  3332.0808576803543; 3535.2228365864353; 3721.0785380404182;
  3976.3717065009314; 4122.0712067062314; 4419.3689952467748;
  4626.8567233261392; 4819.4801271235992; 5178.2745817584664;
  5287.1105397522015; 5560.8265507678507; 5669.72264312464; 6009.4388288755517;
  6225.1361581087285; 6334.4880698152892; 6549.5371831462489;
  6754.1404886902828; 6970.8215935546559; 7263.8449141860337;
  7594.5636204667708; 7867.2813502931358; 8147.8720151679427; 8314.41818384163;
  8481.98903290084; 8578.9308302431746; 8754.1809073196018; 8965.4331794154168;
  9100.6734206681231; 9322.0970399568087; 9519.5699232985226;
  9683.2944316175872; 9889.60604436053; 10172.545966671443; 10275.65591016856;
  10494.80035065616; 10796.952532179199; 10999.938331826066;
  11137.737408771745; 11267.738730229185; 11367.690715358269;
  11546.216298841849; 11795.110980560645; 12071.429808864825;
  12354.64058057566; 12635.734024566413; 12783.178576510887;
  13034.136764744379; 13311.274833714682; 13508.99176462892;
  13704.584060993426; 13872.58310312192; 14106.830414506676;
  14300.695908281597; 14636.892285104668; 14823.618249354118;
  15041.765286250444; 15156.253028022649; 15401.156882244508;
  15654.829264503634; 15877.289116250757; 16241.891034091072;
  16479.973158643992; 16651.547914035713; 16803.276286122062; 16986.6901562732;
  17185.94315801928; 17460.013707900151; 17769.276682226846;
  17948.619410863521; 18099.570099327138; 18259.7683390613; 18514.57164548105;
  18798.66798216182; 18908.592549948382; 19102.225098445153;
  19258.707586242348; 19391.554186016419; 19515.643109503293; 0.|] *)
(* let kl_cum_discrete ns p q =
  (* ns is increasing array of sample numbers to storer *)
  let q_emp = ref D.empty in
  let pdf_p = Primitive.pdf p in
  let total_n = ns.(Array.length ns - 1) in
  let i = ref 0 in
  let arr = Array.create ~len:(Array.length ns) (0, 0.) in
  let j = ref 0 in
  while !i < total_n do
    q_emp := D.add_sample !q_emp (sample q);
    if Array.mem ns !i ~equal:Int.equal then
      let kl =
        let support_q = D.support !q_emp in
        let pdf_q = D.to_pdf !q_emp in
        let f x =
          let p_x = pdf_p x in
          match pdf_q x with
          | 0. -> raise Undefined
          | q_x -> p_x *. log (p_x /. q_x)
        in
        List.sum (module Float) ~f support_q
      in
      arr.(!j) <- (!i, kl/. float_of_int (!i));
      j := !j + 1 
    else ();
    i := !i + 1
  done;
  arr
;; *)
(* Line 3, characters 18-25:
Error: Unbound module D *)
module D = Empirical.Discrete
;;
(* module D = Ppl.Empirical.Discrete *)
let kl_cum_discrete ns p q =
  (* ns is increasing array of sample numbers to storer *)
  let q_emp = ref D.empty in
  let pdf_p = Primitive.pdf p in
  let total_n = ns.(Array.length ns - 1) in
  let i = ref 0 in
  let arr = Array.create ~len:(Array.length ns) (0, 0.) in
  let j = ref 0 in
  while !i < total_n do
    q_emp := D.add_sample !q_emp (sample q);
    if Array.mem ns !i ~equal:Int.equal then
      let kl =
        let support_q = D.support !q_emp in
        let pdf_q = D.to_pdf !q_emp in
        let f x =
          let p_x = pdf_p x in
          match pdf_q x with
          | 0. -> raise Undefined
          | q_x -> p_x *. log (p_x /. q_x)
        in
        List.sum (module Float) ~f support_q
      in
      arr.(!j) <- (!i, kl/. float_of_int (!i));
      j := !j + 1 
    else ();
    i := !i + 1
  done;
  arr
;;
(* val kl_cum_discrete :
  int array -> 'a Primitive.t -> 'a dist -> (int * float) array = <fun> *)
Array.map ~f:snd @@ kl_cum_discrete (Array.init 100 (fun i -> i*30)) (Primitive.beta 10. 2.) d;;
(* - : float array =
[|inf; 2.1401863553321427; 3.0479442516515718; 4.959425680273517;
  4.9230299956761616; 5.4300896805812817; 5.4359969481445605;
  5.2100853747881022; 5.1184844966952179; 5.0575759472344934;
  4.8613186357403375; 4.8528450179002975; 4.7426469796877173;
  4.8745201716725806; 4.7651151395142; 4.8583898284075726; 4.9646156246445363;
  5.2156448761813534; 5.3337145821229077; 5.3597092376760909;
  5.4123879629694116; 5.4007795414510849; 5.3980323471822764;
  5.4014690101276743; 5.4367336143955693; 5.4326057138235813;
  5.5183984462526352; 5.571838800482336; 5.8255769156481056;
  5.7629947268148962; 5.8877675224172377; 5.92887893273843; 5.866243178349932;
  5.8159769865443423; 5.8750041363729473; 5.9658629156749514;
  6.0515766230190184; 6.0178865310121337; 6.0688333461824167;
  6.0820337688025363; 6.1112406275457571; 6.1434216941587065;
  6.2554377648808241; 6.2434165660507421; 6.3669791012356187;
  6.3226444923537279; 6.33621251579984; 6.3149061328488765; 6.3346622299763249;
  6.3169504823741036; 6.2790650409484572; 6.3011843120801769;
  6.3584407369334137; 6.4168264176202552; 6.4700150556663205;
  6.4406418494618842; 6.5094857436365237; 6.4899593883963895;
  6.5393175998588688; 6.5598090534810618; 6.5303518954994173;
  6.5803856205693183; 6.6020882849181968; 6.6335431428531768;
  6.6035471475625345; 6.6251333533264907; 6.6936729642609345;
  6.6850202036844175; 6.67747084149055; 6.6265528498683866; 6.639815161027971;
  6.61576981320571; 6.6055394051698837; 6.6004268381811384; 6.5890502897363561;
  6.5986170066585466; 6.5873308964865513; 6.5610511052500664;
  6.580668802437601; 6.64286276379751; 6.6243570429886205; 6.63233993805037;
  6.6635096385789678; 6.6613920181770556; 6.6786041838704548;
  6.6725557079691455; 6.7297109014007965; 6.7074431890808; 6.7128125879298821;
  6.762457659210459; 6.797351821017716; 6.8014056622132495; 6.8189002168603681;
  6.8067206341768536; 6.833132393883349; 6.8634190671520807; 6.875680156436224;
  6.8523357785178751; 6.8586656704370039; 0.|] *)
kl_discrete ~n:1000 (Primitive.beta 10. 2.) d;;
(* - : float = 5718.042958611054 *)
kl_discrete ~n:1000 (Primitive.beta 10. 2.) d;;
(* - : float = 5995.3103009997867 *)
kl_discrete ~n:1000 (Primitive.beta 10. 2.) d;;
(* - : float = 6270.7873105950666 *)
kl_discrete ~n:1000 (Primitive.beta 10. 2.) d;;
(* - : float = 6452.9835004818 *)
kl_discrete ~n:1000 (Primitive.beta 10. 2.) d;;
(* - : float = 6057.2008837331887 *)
kl_discrete ~n:10000 (Primitive.beta 10. 2.) d;;
(* - : float = 78226.779456818753 *)
kl_discrete ~n:10000 (Primitive.beta 10. 2.) d;;
(* - : float = 76113.7097450319 *)
kl_discrete ~n:10000 (Primitive.beta 10. 2.) d;;
(* - : float = 78015.319968559648 *)
kl_discrete ~n:10000 (Primitive.beta 10. 2.) d;;
(* - : float = 77955.76684413453 *)
kl_discrete ~n:10000 (Primitive.beta 10. 2.) d;;
(* - : float = 77996.723845426692 *)
kl_discrete ~n:10000 (Primitive.beta 10. 2.) d /. 10000.;;
(* - : float = 7.827518471348748 *)
kl_discrete ~n:10000 (Primitive.beta 10. 2.) d /. 10000.;;
(* - : float = 7.4794369196213317 *)
(* sprinkler;; *)
(* Line 1, characters 0-9:
Error: Unbound value sprinkler *)
(* let grass_model =
  let d =
    condition'
      (fun (w, _) -> if w then 1. else 0.)
      (let* cloudy = flip 0.5 in
       let* rain = flip (if cloudy then 0.8 else 0.2) in
       let* sprinkler = flip (if cloudy then 0.1 else 0.5) in
       (* let* a = flip 0.7 in *)
       let* b = flip 0.9 in
       let* c = flip 0.9 in
       (* let wet_roof  = a && rain in *)
       let wet_grass = (b && rain) || (c && sprinkler) in
       return (wet_grass, rain))
  in
  fmap snd d
;; *)
(* Line 5, characters 21-25:
Error: Unbound value flip *)
let flip = bernoulli;;
(* val flip : float -> bool dist = <fun> *)
let grass_model =
  let d =
    condition'
      (fun (w, _) -> if w then 1. else 0.)
      (let* cloudy = flip 0.5 in
       let* rain = flip (if cloudy then 0.8 else 0.2) in
       let* sprinkler = flip (if cloudy then 0.1 else 0.5) in
       (* let* a = flip 0.7 in *)
       let* b = flip 0.9 in
       let* c = flip 0.9 in
       (* let wet_roof  = a && rain in *)
       let wet_grass = (b && rain) || (c && sprinkler) in
       return (wet_grass, rain))
  in
  fmap snd d
;;
(* val grass_model : bool dist =
  Bind (Conditional (<fun>, Bind (Primitive <abstr>, <fun>)), <fun>) *)
grass_model;;
(* - : bool dist =
Bind (Conditional (<fun>, Bind (Primitive <abstr>, <fun>)), <fun>) *)
(* let d = infer MH(1000) grass_model;; *)
(* Line 1, characters 8-13:
Error: This function has type 'a dist -> infer_strat -> 'a dist
       It is applied to too many arguments; maybe you forgot a `;'. *)
(* let d = infer (MH(1000)) grass_model;; *)
(* Line 1, characters 15-17:
Error: This variant expression is expected to have type 'a dist
       The constructor MH does not belong to type Ppl__.Dist.dist *)
let d = infer grass_model (MH(1000));;
(* val d : bool dist =
  Ppl__.Dist.Bind
   (Ppl__.Dist.Bind
     (Ppl__.Dist.Bind
       (Ppl__.Dist.Bind
         (Ppl__.Dist.Bind
           (Ppl__.Dist.Bind
             (Ppl__.Dist.Bind (Ppl__.Dist.Primitive <abstr>, <fun>), <fun>),
           <fun>),
         <fun>),
       <fun>),
     <fun>),
   <fun>) *)
sample d;;
(* - : bool = true *)
sample d;;
(* - : bool = true *)
sample d;;
(* - : bool = true *)
sample d;;
(* - : bool = true *)
let grass_model =
  let d =
    condition'
      (fun (w, _) -> if w then 1. else 0.)
      (let* cloudy = flip 0.5 in
       let* rain = flip (if cloudy then 0.8 else 0.2) in
       let* sprinkler = flip (if cloudy then 0.1 else 0.5) in
       (* let* a = flip 0.7 in *)
       let* b = flip 0.9 in
       let* c = flip 0.9 in
       (* let wet_roof  = a && rain in *)
       let wet_grass = (b && rain) || (c && sprinkler) in
       return (wet_grass, rain))
  in
  fmap snd d

let grass_model_exact =
  Primitive.categorical [ (true, 0.704225); (false, 0.295775) ]
;;
(* val grass_model : bool dist =
  Bind (Conditional (<fun>, Bind (Primitive <abstr>, <fun>)), <fun>)
val grass_model_exact : bool Primitive.t = <abstr> *)
(* kl_cum_discrete grass_model_exact grass_model;; *)
(* Line 1, characters 16-33:
Error: This expression has type bool Primitive.t
       but an expression was expected of type int array *)
(* kl_cum_discrete grass_model_exact grass_model;; *)
(* Line 1, characters 16-33:
Error: This expression has type bool Primitive.t
       but an expression was expected of type int array *)
print_char 'a';;
(* - : unit = () *)
Array.init 100 (fun i -> i);;
(* - : int array =
[|0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21;
  22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40;
  41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59;
  60; 61; 62; 63; 64; 65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77; 78;
  79; 80; 81; 82; 83; 84; 85; 86; 87; 88; 89; 90; 91; 92; 93; 94; 95; 96; 97;
  98; 99|] *)
(* *;; *)
(* Error: Syntax error *)
kl_cum_discrete (Array.init 1000 (( * ) 30)) grass_model_exact grass_model;;
(* Exception: Ppl__Dist.Undefined.
Raised at file "lib/dist.ml", line 71, characters 32-41
Called from file "lib/dist.ml", line 68, characters 16-26
Called from unknown location
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
kl_cum_discrete (Array.init 1000 (( * ) 30)) grass_model_exact grass_model;;
(* Exception: Ppl__Dist.Undefined.
Raised at file "lib/dist.ml", line 71, characters 32-41
Called from file "lib/dist.ml", line 68, characters 16-26
Called from unknown location
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
kl_cum_discrete (Array.init 1000 (( * ) 30)) grass_model_exact grass_model;;
(* Exception: Ppl__Dist.Undefined.
Raised at file "lib/dist.ml", line 71, characters 32-41
Called from file "lib/dist.ml", line 68, characters 16-26
Called from unknown location
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
kl_cum_discrete (Array.init 1000 (( * ) 30)) grass_model_exact grass_model;;
(* Exception: Ppl__Dist.Undefined.
Raised at file "lib/dist.ml", line 71, characters 32-41
Called from file "lib/dist.ml", line 68, characters 16-26
Called from unknown location
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
kl_cum_discrete (Array.init 1000 (( * ) 30)) grass_model_exact grass_model;;
(* Exception: Ppl__Dist.Undefined.
Raised at file "lib/dist.ml", line 71, characters 32-41
Called from file "lib/dist.ml", line 68, characters 16-26
Called from unknown location
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
kl_cum_discrete (Array.init 1000 (( * ) 30)) grass_model_exact (infer grass_model (MH(1000)));;
(* Interrupted.
Raised by primitive operation at file "lib/dist.ml", line 129, characters 6-35
Called from file "lib/dist.ml", line 68, characters 14-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from unknown location
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
kl_cum_discrete (Array.init 100 (( * ) 30)) grass_model_exact (infer grass_model (MH(1000)));;
(* Interrupted.
Raised by primitive operation at file "lib/dist.ml", line 129, characters 6-35
Called from file "lib/dist.ml", line 68, characters 14-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from unknown location
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
kl_cum_discrete [|100|] grass_model_exact (infer grass_model (MH(1000)));;
(* Interrupted.
Raised by primitive operation at file "lib/dist.ml", line 129, characters 6-35
Called from file "lib/dist.ml", line 68, characters 14-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from file "lib/dist.ml", line 68, characters 16-26
Called from unknown location
Called from file "toplevel/toploop.ml", line 208, characters 17-27 *)
let d = infer grass_model (MH(100));;
(* val d : bool dist =
  Ppl__.Dist.Bind
   (Ppl__.Dist.Bind
     (Ppl__.Dist.Bind
       (Ppl__.Dist.Bind
         (Ppl__.Dist.Bind
           (Ppl__.Dist.Bind
             (Ppl__.Dist.Bind (Ppl__.Dist.Primitive <abstr>, <fun>), <fun>),
           <fun>),
         <fun>),
       <fun>),
     <fun>),
   <fun>) *)
sample d;;
(* - : bool = true *)
sample d;;
(* - : bool = false *)
sample d;;
(* - : bool = true *)
sample d;;
(* - : bool = true *)
sample d;;
(* - : bool = false *)
kl_cum_discrete [|1|] grass_model_exact (infer grass_model (MH(1000)));;
(* - : (int * float) array = [|(0, 0.)|] *)
kl_cum_discrete [|1|] grass_model_exact (infer grass_model (MH(1000)));;
(* - : (int * float) array = [|(0, 0.)|] *)
kl_cum_discrete [|1;2|] grass_model_exact (infer grass_model (MH(1000)));;
(* - : (int * float) array = [|(1, 0.0859053285342091); (0, 0.)|] *)
kl_cum_discrete [|1;2;3|] grass_model_exact (infer grass_model (MH(1000)));;
(* - : (int * float) array =
[|(1, -0.24694168752437221); (2, -0.1234708437621861); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4|] grass_model_exact (infer grass_model (MH(1000)));;
(* - : (int * float) array =
[|(1, -0.24694168752437221); (2, -0.1234708437621861);
  (3, 0.0017940900356182797); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4;5|] grass_model_exact (infer grass_model (MH(1000)));;
(* - : (int * float) array =
[|(1, -0.24694168752437221); (2, -0.1234708437621861);
  (3, 0.0017940900356182797); (4, 0.0058775535227366983); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4;5;20|] grass_model_exact (infer grass_model (MH(1000)));;
(* - : (int * float) array =
[|(1, 0.0859053285342091); (2, 0.0016194317062730515);
  (3, 0.0017940900356182797); (4, 0.0064832284871772748);
  (5, 0.01022224066368289); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4;5;20|] grass_model_exact (infer grass_model (MH(1000)));;
(* - : (int * float) array =
[|(1, 0.0859053285342091); (2, 0.0016194317062730515);
  (3, 0.0017940900356182797); (4, 0.0064832284871772748);
  (5, 0.01022224066368289); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4;5;20|] grass_model_exact (infer grass_model (MH(1000)));;
(* - : (int * float) array =
[|(1, -0.24694168752437221); (2, -0.1234708437621861);
  (3, -0.0823138958414574); (4, -0.061735421881093051);
  (5, 0.01022224066368289); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4;5;20;40|] grass_model_exact (infer grass_model (MH(1000)));;
(* - : (int * float) array =
[|(1, 0.0859053285342091); (2, 0.0016194317062730515);
  (3, 0.028635109511403033); (4, 0.047280609374431626);
  (5, 0.01718106570684182); (20, 0.00016194317062730515); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4;5;20;40;60|] grass_model_exact (infer grass_model (MH(1000)));;
(* - : (int * float) array =
[|(1, -0.360300164501364); (2, 0.14317741465612788); (3, 0.028635109511403033);
  (4, 0.0058775535227366983); (5, 0.0006477726825092206);
  (20, 0.00043613971140904484); (40, 0.00039470622919534628); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4;5;20;40;60|] grass_model_exact (infer grass_model (MH(10)));;
(* - : (int * float) array =
[|(1, -0.24694168752437221); (2, -0.1234708437621861);
  (3, -0.0823138958414574); (4, 0.0064832284871772748);
  (5, 0.01022224066368289); (20, 0.00043613971140904484);
  (40, 0.00017458674299264138); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4;5;20;40;60|] grass_model_exact (infer grass_model (MH(10)));;
(* - : (int * float) array =
[|(1, -0.24694168752437221); (2, -0.1234708437621861);
  (3, -0.0823138958414574); (4, -0.061735421881093051);
  (5, -0.049388337504874438); (20, 0.00793587191320412);
  (40, 0.00072388388036215073); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4;5;20;40;60|] grass_model_exact (infer grass_model (MH(10)));;
(* - : (int * float) array =
[|(1, -0.24694168752437221); (2, 0.0016194317062730515);
  (3, 0.0017940900356182797); (4, 0.0064832284871772748);
  (5, 0.0006477726825092206); (20, 0.0038433242406225089);
  (40, 0.00039470622919534628); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4;5;20;40;60|] grass_model_exact (infer grass_model (MH(10)));;
(* - : (int * float) array =
[|(1, -0.24694168752437221); (2, 0.0016194317062730515);
  (3, 0.0017940900356182797); (4, 0.0064832284871772748);
  (5, 0.01022224066368289); (20, 0.0038433242406225089);
  (40, 0.0011856849973480008); (0, 0.)|] *)
kl_cum_discrete [|1;2;3;4;5;20;40;60|] grass_model_exact (infer grass_model (MH(10)));;
(* - : (int * float) array =
[|(1, 0.0859053285342091); (2, 0.14317741465612788); (3, 0.028635109511403033);
  (4, 0.0058775535227366983); (5, 0.0006477726825092206);
  (20, 1.2313790777747617e-05); (40, 5.7611163252879042e-07); (0, 0.)|] *)
kl_cum_discrete (Array.init 50 (( * ) 20)) grass_model_exact (infer grass_model (MH(10)));;
(* - : (int * float) array =
[|(0, -inf); (20, 0.00043613971140904484); (40, 4.7112856640053447e-05);
  (60, 4.7044849476670625e-05); (80, 4.8876392293765395e-06);
  (100, 2.0222755113863365e-05); (120, 3.3188858967332587e-05);
  (140, 4.1604067245215991e-05); (160, 2.6933514803586558e-05);
  (180, 1.8314106799258118e-05); (200, 1.2940759054633835e-05);
  (220, 9.430376553530935e-06); (240, 1.2407862758414378e-05);
  (260, 9.5231751286090211e-06); (280, 5.6909322359801376e-06);
  (300, 1.459335611116794e-06); (320, 6.3867742067317537e-07);
  (340, 1.4616929574143432e-06); (360, 1.7439273236420059e-06);
  (380, 9.73380089922311e-07); (400, 1.6655929688723456e-06);
  (420, 1.8694120691486387e-06); (440, 1.1855491944364082e-06);
  (460, 1.7560753339334326e-06); (480, 2.3471979459101596e-06);
  (500, 2.4674165716624674e-06); (520, 1.7813344518534163e-06);
  (540, 1.8950723209050283e-06); (560, 2.3511632184673092e-06);
  (580, 2.8004469630238009e-06); (600, 3.6431998285518334e-06);
  (620, 4.5013114214686314e-06); (640, 4.4659514471927473e-06);
  (660, 4.8414163575897347e-06); (680, 5.1924862278331526e-06);
  (700, 4.7199214517383767e-06); (720, 5.8231297873749509e-06);
  (740, 5.3226788532050431e-06); (760, 5.5937212780493479e-06);
  (780, 5.84550705461293e-06); (800, 5.7239348633183331e-06);
  (820, 5.2793321945819507e-06); (840, 5.1817553891729e-06);
  (860, 5.6957875206125194e-06); (880, 4.9964602337432413e-06);
  (900, 4.3829558318703092e-06); (920, 4.07775157346369e-06);
  (940, 4.4951524055656586e-06); (960, 4.6612929814499037e-06); (0, 0.)|] *)
Array.map ~f:snd @@ kl_cum_discrete (Array.init 50 (( * ) 20)) grass_model_exact (infer grass_model (MH(10)));;
(* - : float array =
[|-inf; 0.0016014851909731177; 0.0018151892266315335; 0.0015434394555996439;
  0.00056988076361432958; 0.00016551169269879152; 0.00026915974323147608;
  0.00016193747571710519; 0.00010468008842994285; 8.4091249433191568e-05;
  5.068851351404502e-05; 4.381280050860721e-05; 4.4381684258111273e-05;
  4.44380520300494e-05; 3.0769280817440044e-05; 3.5277067712600888e-05;
  4.7044736221387923e-05; 4.97811348629459e-05; 4.4696279756440209e-05;
  4.0432023617769912e-05; 4.23733149613344e-05; 4.6769966461684335e-05;
  3.5436392251114189e-05; 3.9111896139892129e-05; 3.809913890875062e-05;
  3.9109446421278837e-05; 3.4395442896311631e-05; 3.361443159344989e-05;
  3.1330665737972684e-05; 2.6612968012173432e-05; 2.6223515412344063e-05;
  2.8226388708749921e-05; 2.5443571579965663e-05; 2.6117882319153931e-05;
  2.6713096698753991e-05; 2.7236347826211868e-05; 2.8688299056612208e-05;
  3.2068967551593721e-05; 3.0326755835458533e-05; 2.7842379620873929e-05;
  2.5620145000176988e-05; 2.5145699544213572e-05; 2.3954016762078485e-05;
  2.3542316497638972e-05; 1.759307951500403e-05; 1.6348577494357717e-05;
  1.6728699473369897e-05; 1.7079693008239536e-05; 1.6422566298784002e-05; 0.|] *)
Array.map ~f:snd @@ kl_cum_discrete (Array.init 50 (( * ) 30)) grass_model_exact (infer grass_model (MH(10)));;
(* - : float array =
[|-inf; 0.0018760273140345271; 0.00089491666769954815; 0.00017410227634735308;
  0.00011850647070400834; 5.7485617804816321e-05; 5.9811346296471215e-05;
  6.85020924763885e-05; 5.764941411645514e-05; 6.1486526303157645e-05;
  4.8173135866664322e-05; 3.8845123428801879e-05; 3.2061240964769754e-05;
  2.2565211122966221e-05; 1.7733198687697233e-05; 2.1614938515635717e-05;
  2.3390559669288576e-05; 2.1906704819619206e-05; 2.3179050538374076e-05;
  2.1745137079331426e-05; 1.7410930221482685e-05; 1.6571537664248103e-05;
  1.7466700480834543e-05; 1.8224795613470536e-05; 1.8862314546117766e-05;
  2.015634469385047e-05; 1.9833845328780046e-05; 1.7535435629899047e-05;
  1.9182031337011122e-05; 1.7678181161180223e-05; 1.6880466221820113e-05;
  1.469017036520256e-05; 1.5013016772197756e-05; 1.4420958529491124e-05;
  1.2320399741804683e-05; 1.1210250271510846e-05; 1.0859964408870109e-05;
  9.354951178682927e-06; 8.839910835075609e-06; 8.3687631045988339e-06;
  8.4075582883053978e-06; 7.5392924010111434e-06; 7.80000331034688e-06;
  8.0416563488714064e-06; 8.6844087165657647e-06; 8.6761722238356782e-06;
  8.2694898216600339e-06; 8.4523952687538152e-06; 7.7156418370740928e-06; 0.|] *)
Array.map ~f:snd @@ kl_cum_discrete (Array.init 50 (( * ) 30)) grass_model_exact (infer grass_model (Rejection(100,Soft)));;
(* - : float array =
[|-inf; 0.0031901140279091949; 0.0011863884177991525; 0.0007114899957694472;
  0.00050529812560779343; 0.00048922341790355833; 0.00031861664073817305;
  0.00017158113158276283; 0.00019985731657567058; 0.00016697452255761718;
  0.00016193957107520535; 0.00013202641497827623; 0.00011631651910585173;
  9.3700210894868139e-05; 8.5023105445469226e-05; 9.2875915703452823e-05;
  9.17980252816816e-05; 9.7275826750567725e-05; 8.8939291340326725e-05;
  6.6761259569921485e-05; 7.1032823505897839e-05; 6.4177878501031665e-05;
  6.0125813313716055e-05; 5.4921145212692678e-05; 4.9009534285126129e-05;
  4.5234945400818606e-05; 4.3069134001171267e-05; 4.0039837275877449e-05;
  4.0285618538596459e-05; 4.044271333485145e-05; 3.8720030737195187e-05;
  3.9670121666541159e-05; 3.9667019123823908e-05; 4.0412411207377196e-05;
  3.87627317565499e-05; 3.8660820444723457e-05; 3.7156561064400528e-05;
  3.5126941749693855e-05; 3.4457933705504832e-05; 3.4966578356437574e-05;
  3.4849693266708266e-05; 3.58109274296536e-05; 3.5617973546917156e-05;
  3.593118223334911e-05; 3.6713868349879251e-05; 3.5940801786414163e-05;
  3.5672748497961365e-05; 3.3593163459005454e-05; 3.2522226596467526e-05; 0.|] *)
Array.map ~f:snd @@ kl_cum_discrete (Array.init 50 (( * ) 30)) grass_model_exact (infer grass_model (Rejection(1000,Soft)));;
(* - : float array =
[|-inf; 0.0009991622560224483; 0.00089491666769954815; 0.00058703799663295639;
  0.00050529812560779343; 0.00039100974771148712; 0.00028873405887764155;
  0.00024690055789312643; 0.00023229298491066319; 0.0002326105909378408;
  0.00017209237410849686; 0.00018350695586289047; 0.00018243170839609806;
  0.00018790116265858617; 0.00017025023782565497; 0.00016732560269375448;
  0.00015859874684812561; 0.00015556905422182737; 0.00013931673878287627;
  0.00012577581907816863; 0.00011757083530583379; 0.00011033966378422427;
  0.00010657482681134588; 9.8190434499931823e-05; 9.3042463528673826e-05;
  9.6603066994917057e-05; 8.9779013248199747e-05; 8.7264585772258888e-05;
  8.32207103794799e-05; 7.6521215855213066e-05; 7.7555078954738809e-05;
  7.7033297223390356e-05; 7.3877390657412124e-05; 6.9779460639206016e-05;
  6.8260286956471823e-05; 6.3687324974636978e-05; 6.0521220979526377e-05;
  5.67419620621224e-05; 5.4954862927371658e-05; 5.40596483543317e-05;
  5.4712437927047267e-05; 5.5287967670917043e-05; 5.2909871187320422e-05;
  5.3415620151695441e-05; 5.1209045486480322e-05; 5.0394798244743579e-05;
  4.666610777157544e-05; 4.4910440091297858e-05; 4.3267541043208476e-05; 0.|] *)
(* g;; *)
(* Line 1, characters 0-1:
Error: Unbound value g *)
(* t;; *)
(* Line 1, characters 0-1:
Error: Unbound value t *)
(* type t = `Ok;; *)
(* Error: Syntax error *)
type t = [`Ok];;
(* type t = [ `Ok ] *)
type t' = [`Ok | `Not];;
(* type t' = [ `Not | `Ok ] *)
(* t' <: t;; *)
(* Line 1, characters 3-5:
Error: Unbound value <: *)
(* t'<:t;; *)
(* Line 1, characters 2-4:
Error: Unbound value <: *)
(* t':>t;; *)
(* Error: Syntax error *)
(* t':>t;; *)
(* Error: Syntax error *)
(* t':> t;; *)
(* Error: Syntax error *)
(* t' :> t;; *)
(* Error: Syntax error *)
(* t' :> t;; *)
(* Error: Syntax error *)
(* let `Ok = (t' :> t);; *)
(* Line 1, characters 11-13:
Error: Unbound value t' *)
(* let x:(t' :> t);; *)
(* Error: Syntax error *)
(* let x:(t' :> t) = `Ok;; *)
(* Error: Syntax error *)
(* let x:(t' :> t) = `Ok;; *)
(* Error: Syntax error *)
(* let x:(t' <: t) = `Ok;; *)
(* Error: Syntax error *)
let p = `Ok;;
(* val p : [> `Ok ] = `Ok *)
let p:t' = `Ok;;
(* val p : t' = `Ok *)
let p:t' = `Ok;;
(* val p : t' = `Ok *)
let p:t' = `Ok;;
(* val p : t' = `Ok *)
let p:t' = `Ok;;
(* val p : t' = `Ok *)
let p:t' = `Ok;;
(* val p : t' = `Ok *)
let p = `Ok;;
(* val p : [> `Ok ] = `Ok *)
let p:t = `Ok;;
(* val p : t = `Ok *)
let p:t' = `Ok;;
(* val p : t' = `Ok *)
let p:t = `Ok;;
(* val p : t = `Ok *)
(* counter;; *)
(* Line 1, characters 0-7:
Error: Unbound value counter *)
#utop_help;;
#utop_macro;;
